sudo bash -c 'apt update && apt upgrade -y && \
apt install nfs-common && \
mkdir -p /home/ubuntu/.kube/mnt/nfs_client && mount 10.0.218.175:/home/ubuntu/.kube/mnt/nfs_share'

sudo nano /etc/fstab 
10.0.218.175:/home/ubuntu/.kube/mnt/nfs_share /home/ubuntu/.kube/mnt/nfs_client nfs defaults 0 0

/lib/systemd/system/nfs-common.service -> /dev/null
/usr/lib/systemd/system/nfs-common.service -> /dev/null
sudo find /etc/systemd /lib/systemd /usr/lib/systemd -name 'nfs-common.service' -exec ls -l {} \


sudo rm -f /etc/systemd/system/nfs-common.service
sudo rm -f /lib/systemd/system/nfs-common.service
sudo systemctl daemon-reexec
sudo systemctl start nfs-common

ubuntu@ip-10-0-129-108:~$ sudo rm -f /etc/systemd/system/nfs-common.service
ubuntu@ip-10-0-129-108:~$ sudo chattr -i /etc/systemd/system/nfs-common.service
chattr: No such file or directory while trying to stat /etc/systemd/system/nfs-common.service
ubuntu@ip-10-0-129-108:~$ sudo rm -f /lib/systemd/system/nfs-common.service
ubuntu@ip-10-0-129-108:~$ sudo systemctl list-unit-files --state=masked


sudo nano /etc/idmapd.conf
[General]

Verbosity = 0
# set your own domain here, if it differs from FQDN minus hostname
 Domain = localdomain

[Mapping]

Nobody-User = nobody
Nobody-Group = nogroup
sudo systemctl restart nfs-common



curl -fsSL https://raw.githubusercontent.com/AlexandrNeverov/k8s/refs/heads/main/dashboard_setup | sudo bash


# S1
sudo bash -c 'timedatectl set-timezone America/New_York && \
apt update && \
apt install -y chrony net-tools tree apt-transport-https ca-certificates curl gpg && \
netstat --version && openssl version && tree --version && apt show apt-transport-https && apt show ca-certificates && \
curl --version && \
mkdir -p -m 755 /etc/apt/keyrings && \
curl -fSL https://pkgs.k8s.io/core:/stable:/v1.32/deb/Release.key | gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg && \
echo "deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.32/deb/ /" | tee /etc/apt/sources.list.d/kubernetes.list && \
apt update && apt upgrade -y && \
apt install -y kubelet kubeadm kubectl containerd && \
swapoff -a && apt-mark hold kubelet kubeadm kubectl && \
systemctl enable chrony && systemctl start chrony && \
apt update && apt upgrade -y && \
modprobe br_netfilter && modprobe overlay && echo "net.ipv4.ip_forward=1" >> /etc/sysctl.conf && echo \
"net.bridge.bridge-nf-call-iptables=1" >> /etc/sysctl.conf && sysctl -p /etc/sysctl.conf && mkdir -p /etc/containerd && touch /etc/containerd/config.toml && \
curl -SL https://raw.githubusercontent.com/AlexandrNeverov/k8s/refs/heads/main/config.toml > /etc/containerd/config.toml && cat /etc/containerd/config.toml && \
systemctl restart containerd && \
kubeadm init \
  --apiserver-advertise-address=$(hostname -I | awk "{print $1}") \
  --pod-network-cidr=10.244.0.0/16 \
  --apiserver-cert-extra-sans=$(curl -s ifconfig.me; echo) && \
mkdir -p $HOME/.kube && \
cp -i /etc/kubernetes/admin.conf $HOME/.kube/config && \
chown $(id -u):$(id -g) $HOME/.kube/config && \
kubectl taint nodes $(hostname) node.kubernetes.io/not-ready:NoSchedule- && \
kubectl taint nodes $(hostname) node-role.kubernetes.io/control-plane:NoSchedule- && \
kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml && \
apt update && apt upgrade -y && \
sleep 30 && \
kubectl get pods -A && \
mkdir -p $HOME/.kube/dashbord && \
curl https://raw.githubusercontent.com/AlexandrNeverov/k8s/refs/heads/main/dashboard_deployment.yaml > $HOME/.kube/dashbord/dashboard-deployment.yaml && \
curl https://raw.githubusercontent.com/AlexandrNeverov/k8s/refs/heads/main/node_port.yaml > $HOME/.kube/dashbord/node-port.yaml && \
kubectl apply -f $HOME/.kube/dashbord/dashboard-deployment.yaml && kubectl apply -f $HOME/.kube/dashbord/node-port.yaml && \
sleep 30 && \
kubectl get pods -n kubernetes-dashboard'


# https://www.youtube.com/watch?v=Vw0c3ZaR9uI
# https://github.com/evsq/devopsnatroechku/blob/main/kubeadm-k8s1.30.sh

# we can install Docker (if it is necessary)
sudo apt update && sudo apt install docker.io 

# updating Ubuntu and installing net-tools and tree
sudo apt update && sudo apt install -y net-tools tree openssl 
sudo netstat --version && sudo openssl version && sudo tree --version

# updating Ubuntu again and installing certificates
sudo apt update

# install the tool that we wil use for apt-reposotories (that needs https)
sudo apt install apt-transport-https
# install certificates
sudo apt install ca-certificates
# install curl (for taking information from URL)
sudo apt install curl

# !S1 we can use one-line command!: 
sudo apt update && \
sudo apt install -y net-tools tree openssl apt-transport-https ca-certificates curl gpg && \
sudo netstat --version && sudo openssl version && sudo tree --version && sudo apt show apt-transport-https && sudo apt show ca-certificates && \
sudo curl --version && sudo --version

# making a folder for keys (for accessing to k8s-repository)
sudo mkdir -p -m 755 /etc/apt/keyrings

# getting a certificate and dave it to a bin-file
curl -fSL https://pkgs.k8s.io/core:/stable:/v1.32/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg

# taking to the apt-repo
echo 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.32/deb/ /' | sudo tee /etc/apt/sources.list.d/kubernetes.list

# !S2 we can use one-line command!: 
sudo mkdir -p -m 755 /etc/apt/keyrings && \
curl -fSL https://pkgs.k8s.io/core:/stable:/v1.32/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg && \
echo 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.32/deb/ /' | sudo tee /etc/apt/sources.list.d/kubernetes.list

# installing k8s

# updating 
sudo apt update

# upgrading
sudo apt upgrade

# installing k8s
sudo apt install -y kubelet kubeadm kubectl containerd

# disabling swamp 
sudo swapoff -a 

#holding k8s updating
sudo apt-mark hold kubelet kubeadm kubectl

# !S3 we can use one-line command!: 
sudo apt update && sudo apt upgrade -y && /\
sudo apt install -y kubelet kubeadm kubectl containerd && \
sudo swapoff -a && sudo apt-mark hold kubelet kubeadm kubectl

# activation net-module

# switch on root
sudo -i

# switch modules
modprobe br_netfilter
modprobe overlay

# enable net-traffic:
echo "net.ipv4.ip_forward=1" >> /etc/sysctl.conf
echo "net.bridge.bridge-nf-call-iptables=1" >> /etc/sysctl.conf
sysctl -p /etc/sysctl.conf

# return to user

# !S4 we can use one-line command!: 
sudo -i && \ 
modprobe br_netfilter && \ 
modprobe overlay && \
echo "net.ipv4.ip_forward=1" >> /etc/sysctl.conf && \
echo "net.bridge.bridge-nf-call-iptables=1" >> /etc/sysctl.conf && \
sysctl -p /etc/sysctl.conf && \
exit

# in v1.22 and later, if the user does not set the cgroupDriver field under KubeletConfiguration, kubeadm defaults it to systemd.
# by default containerd set SystemdCgroup = false, so you need to activate SystemdCgroup = true, put it in /etc/containerd/config.toml

sudo mkdir /etc/containerd/ && sudo nano /etc/containerd/config.toml

version = 2
[plugins]
  [plugins."io.containerd.grpc.v1.cri"]
   [plugins."io.containerd.grpc.v1.cri".containerd]
      [plugins."io.containerd.grpc.v1.cri".containerd.runtimes]
        [plugins."io.containerd.grpc.v1.cri".containerd.runtimes.runc]
          runtime_type = "io.containerd.runc.v2"
          [plugins."io.containerd.grpc.v1.cri".containerd.runtimes.runc.options]
            SystemdCgroup = true


sudo systemctl restart containerd && \
sudo apt update && \
sudo kubeadm init \
  --apiserver-advertise-address=10.0.173.84 \
  --pod-network-cidr 10.0.72.101/16 \
  --apiserver-cert-extra-sans=54.235.49.37

# update again
sudo apt update

# get ip
ip a

# initiation a cluster
sudo kubeadm init \
  --apiserver-advertise-address=10.0.173.84 \
  --pod-network-cidr 10.0.72.101/16 \
  --apiserver-cert-extra-sans=54.235.49.37

# set up a config
mkdir -p $HOME/.kube
sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
sudo chown $(id -u):$(id -g) $HOME/.kube/config

# check the config
kubectl config view
sudo kubectl config view

# if the sudo config is empty make the main config
sudo mkdir -p /root/.kube
sudo cp ~/.kube/config /root/.kube/config

# observing the nodes
sudo kubectl get nodes

# or
sudo kubectl describe nodes

# observing the pods
sudo kubectl get pods -n kube-system

# to skip node.kubernetes.io/not-ready:NoSchedule
sudo kubectl taint nodes <node-name> node.kubernetes.io/not-ready:NoSchedule-

# to skip node-role.kubernetes.io/control-plane:NoSchedule
sudo kubectl taint nodes <node-name> node-role.kubernetes.io/control-plane:NoSchedule-

# observing the nodes
sudo kubectl get nodes

# installing flannel
sudo kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml
kubectl delete -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml
sudo kubectl get pods -n kube-flannel

# update again
sudo apt update && sudo apt upgrade -y

# observing the nodes
sudo kubectl get nodes
sudo kubectl get pods -n kube-system

# Install Dashboard

# Make manifets
sudo mkdir -p /home/.kube/manifests && cd /home/.kube/manifests && sudo touch dashboard-deployment.yaml && sudo nano dashboard-deployment.yaml (and copy this: https://github.com/AlexandrNeverov/k8s/blob/main/dashboard_deployment.yaml)
sudo sudo touch dashboard-node-port.yaml && sudo nano dashboard-node-port.yaml (and copy this: https://github.com/AlexandrNeverov/k8s/blob/main/node_port.yaml)

# making a TLS/SSL certificate
sudo mkdir -p /etc/ssl/certs/ && sudo openssl req -new -newkey rsa:2048 -days 365 -nodes -x509 -keyout /etc/ssl/certs/dashboard.key -out /etc/ssl/certs/dashboard.crt

# making the secrets

sudo kubectl create namespace kubernetes-dashboard
sudo kubectl create secret tls kubernetes-dashboard-certs \
  --cert=/etc/ssl/certs/dashboard.crt \
  --key=/etc/ssl/certs/dashboard.key \
  -n kubernetes-dashboard

# update again
sudo apt update && sudo apt upgrade -y

# check dachboards pods
sudo kubectl get pods -A && sudo kubectl get pods -n kubernetes-dashboard

sudo kubectl apply -f dashboard-deployment.yaml && sudo kubectl apply -f node_port.yaml

# adding nodes
Your Kubernetes control-plane has initialized successfully!

To start using your cluster, you need to run the following as a regular user:

  mkdir -p $HOME/.kube
  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
  sudo chown $(id -u):$(id -g) $HOME/.kube/config

Alternatively, if you are the root user, you can run:

  export KUBECONFIG=/etc/kubernetes/admin.conf

You should now deploy a pod network to the cluster.
Run "kubectl apply -f [podnetwork].yaml" with one of the options listed at:
  https://kubernetes.io/docs/concepts/cluster-administration/addons/

Then you can join any number of worker nodes by running the following on each as root:

kubeadm join 10.0.69.56:6443 --token 9lndfe.9ee08hsxlqq2p0p9 \
	--discovery-token-ca-cert-hash sha256:819d2d886cecda336b3a8032fe01fee88c1b4b7df5e4ced52bc0878fc5149bfc

