# https://www.youtube.com/watch?v=Vw0c3ZaR9uI
# https://github.com/evsq/devopsnatroechku/blob/main/kubeadm-k8s1.30.sh

# updating Ubuntu and installing net-tools and tree
sudo apt update && sudo apt install -y net-tools tree 

# we can install Docker (if it is necessary)
sudo apt install docker.io 

# updating Ubuntu again and installing certificates

sudo apt update
# install the tool that we wil use for apt-reposotories (that needs https)
sudo apt install apt-transport-https
# install certificates
sudo apt install ca-certificates
# install curl (for taking information from URL
sudo apt install curl
# crypto-key tools
sudo apt install gpg
# CertBot - for getting SSL/TLS cetrificates
sudo apt install certbot
# OpenSSL - for making own certificate
sudo apt install openssl

# we can use one-line command: sudo apt update && sudo apt install -y apt-transport-https ca-certificates curl gpg certbot openssl

# making a folder for keys (for accessing to k8s-repository)
sudo mkdir -p -m 755 /etc/apt/keyrings

# getting a certificate and dave it to a bin-file
curl -fSL https://pkgs.k8s.io/core:/stable:/v1.32/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg

# taking to the apt-repo
echo 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.32/deb/ /' | sudo tee /etc/apt/sources.list.d/kubernetes.list

# installing k8s

# updating 
sudo apt update

# upgrading
sudo apt upgrade

# installing k8s
sudo apt install -y kubelet kubeadm kubectl containerd

# disabling swamp 
sudo swapoff -a 

#holding k8s updating
udo apt-mark hold kubelet kubeadm kubectl

# we can use one-line command: sudo apt update && sudo apt upgrade -y && sudo apt install -y kubelet kubeadm kubectl containerd && sudo swapoff -a && sudo apt-mark hold kubelet kubeadm kubectl

# activation net-module

# switch on root
sudo -i

# switch modules
modprobe br_netfilter
modprobe overlay

# enavle net-traffic:
echo "net.ipv4.ip_forward=1" >> /etc/sysctl.conf
echo "net.bridge.bridge-nf-call-iptables=1" >> /etc/sysctl.conf
sysctl -p /etc/sysctl.conf

# return to user

# in v1.22 and later, if the user does not set the cgroupDriver field under KubeletConfiguration, kubeadm defaults it to systemd.
# by default containerd set SystemdCgroup = false, so you need to activate SystemdCgroup = true, put it in /etc/containerd/config.toml

sudo mkdir /etc/containerd/
sudo nano /etc/containerd/config.toml

version = 2
[plugins]
  [plugins."io.containerd.grpc.v1.cri"]
   [plugins."io.containerd.grpc.v1.cri".containerd]
      [plugins."io.containerd.grpc.v1.cri".containerd.runtimes]
        [plugins."io.containerd.grpc.v1.cri".containerd.runtimes.runc]
          runtime_type = "io.containerd.runc.v2"
          [plugins."io.containerd.grpc.v1.cri".containerd.runtimes.runc.options]
            SystemdCgroup = true

sudo systemctl restart containerd

# update again
sudo apt update

# get ip
ip a

# initiation a cluster
sudo kubeadm init \
  --apiserver-advertise-address=10.0.173.84 \
  --pod-network-cidr 10.244.0.0/16 \
  --apiserver-cert-extra-sans=54.147.14.225

# set up a config
mkdir -p $HOME/.kube
sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
sudo chown $(id -u):$(id -g) $HOME/.kube/config

# check the config
kubectl config view
sudo kubectl config view

# if the sudo config is empty make the main config
sudo mkdir -p /root/.kube
sudo cp ~/.kube/config /root/.kube/config

# observing the nodes
sudo kubectl get nodes

# or
sudo kubectl describe nodes

# observing the pods
kubectl get pods -n kube-system

# to skip node.kubernetes.io/not-ready:NoSchedule
sudo kubectl taint nodes <node-name> node.kubernetes.io/not-ready:NoSchedule-

# to skip node-role.kubernetes.io/control-plane:NoSchedule
sudo kubectl taint nodes <node-name> node-role.kubernetes.io/control-plane:NoSchedule-

# observing the nodes
sudo kubectl get nodes

# installing flannel
sudo kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml

# update again
sudo apt update && sudo apt upgrade -y

# observing the nodes
sudo kubectl get nodes

# Install Dashboard
# Make manifets
sudo mkdir -p /home/.kube/manifests && cd /home/.kube/manifests && sudo touch dashboard-deployment.yaml && sudo nano dashboard-deployment.yaml (and copy this: https://github.com/AlexandrNeverov/k8s/blob/main/dashboard_deployment.yaml)
sudo sudo touch dashboard-node-port.yaml && sudo nano dashboard-node-port.yaml (and copy this: https://github.com/AlexandrNeverov/k8s/blob/main/dashboard_deployment.yaml)

# making manifest (/etc/kubernetes/manifests/dashboard-nodeport.yaml)
apiVersion: v1
kind: Service
metadata:
  name: kubernetes-dashboard
  namespace: kubernetes-dashboard
spec:
  type: NodePort
  selector:
    k8s-app: kubernetes-dashboard
  ports:
    - port: 443
      targetPort: 8443
      nodePort: 30000

# checking
sudo kubectl get pods -n kubernetes-dashboard

# apply manifest
sudo kubectl apply -f dashboard-nodeport.yaml

# making a TLS/SSL certificate

# make my cerificate
sudo mkdir -p /etc/kubernetes/certificates/dashboard && sudo openssl req -new -newkey rsa:2048 -days 365 -nodes -x509 -keyout /etc/kubernetes/certificates/dashboard/dashboard.key -out /etc/kubernetes/certificates/dashboard/dashboard.crt

# find dachboards pods among all pods
sudo kubectl get pods --all-namespaces

# define dachboards pods
sudo kubectl get pods -n kubernetes-dashboard

# find a downloaded manifest
sudo kubectl get deployment kubernetes-dashboard -n kubernetes-dashboard -o yaml

# we can edit it
sudo kubectl edit deployment kubernetes-dashboard -n kubernetes-dashboard

# bit it will be better to download it to the local folder (under the root user)n
sudo kubectl get deployment kubernetes-dashboard -n kubernetes-dashboard -o yaml > /etc/kubernetes/manifests/dashboard-deployment.yaml

# making the secrets

sudo kubectl create secret tls kubernetes-dashboard-certs \
  --cert=/etc/ssl/certs/dashboard.crt \
  --key=/etc/ssl/certs/dashboard.key \
  -n kubernetes-dashboard
  - --tls-cert-file=/etc/ssl/certs/dashboard.crt
  - --tls-key-file=/etc/ssl/certs/dashboard.key


sudo kubectl apply -f dashboard-deployment_.yaml


# adding nodes
sudo kubeadm join 10.0.173.84:6443 --token luyqe4.fq8iqs6bl61fzfdf \
	--discovery-token-ca-cert-hash sha256:8a5accadb2d4283f5542f0a4021e2260b46b309fa15bfaff0992dcf2e34f4bb0
